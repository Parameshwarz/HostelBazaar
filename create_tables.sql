create table if not exists public.blocked_users (id uuid default gen_random_uuid() primary key, blocker_id uuid references auth.users(id) on delete cascade not null, blocked_id uuid references auth.users(id) on delete cascade not null, created_at timestamp with time zone default timezone('utc'::text, now()) not null, unique(blocker_id, blocked_id)); create table if not exists public.muted_chats (id uuid default gen_random_uuid() primary key, user_id uuid references auth.users(id) on delete cascade not null, chat_id uuid references public.chats(id) on delete cascade not null, created_at timestamp with time zone default timezone('utc'::text, now()) not null, unique(user_id, chat_id)); alter table public.blocked_users enable row level security; create policy "Users can manage their own blocks" on public.blocked_users for all using (auth.uid() = blocker_id) with check (auth.uid() = blocker_id); alter table public.muted_chats enable row level security; create policy "Users can manage their own muted chats" on public.muted_chats for all using (auth.uid() = user_id) with check (auth.uid() = user_id);
